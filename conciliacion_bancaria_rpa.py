# -*- coding: utf-8 -*-
"""conciliacion-bancaria-rpa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUDgQJ9pFYNgqpLhdaPzzwrX_FdVjbxp
"""

!pip install PrettyTable

import pandas as pd
import numpy as np
from prettytable import PrettyTable

df_banco = pd.read_csv("extracto_bancario.csv")
df_mayor = pd.read_csv("libro_mayor.csv")

print(df_banco)
print(df_mayor)

saldo_banco = df_banco.iloc[len(df_banco)-1, 4]
saldo_mayor = df_mayor.iloc[len(df_mayor)-1, 4]

print(saldo_banco)
print(saldo_mayor)

ajustes = []
ajustes2 = []

for index, row in df_banco.iterrows():
    if row["Concepto"] != "Saldo inicial":
      concepto = row["Concepto"]
      debe = row["Débitos"]
      haber = row["Créditos"]

      if pd.isna(debe): # Hay un crédito
        # Haber
        # Concepto
        if not ((df_mayor['Débitos'] == haber) & (df_mayor['Concepto'] == concepto)).any():
          ajustes.append((concepto, haber))

      if pd.isna(haber): # Hay un débito
        # Debe
        # Concepto
        if not ((df_mayor['Créditos'] == debe) & (df_mayor['Concepto'] == concepto)).any():
           ajustes.append((concepto, debe))


for index, row in df_mayor.iterrows():
    if row["Concepto"] != "Saldo inicial":
      concepto = row["Concepto"]
      debe = row["Débitos"]
      haber = row["Créditos"]

      if pd.isna(debe): # Hay un crédito
        # Haber
        # Concepto
        if not ((df_banco['Débitos'] == haber) & (df_banco['Concepto'] == concepto)).any():
          ajustes2.append((concepto, haber))

      if pd.isna(haber): # Hay un débito
        # Debe
        # Concepto
        if not ((df_banco['Créditos'] == debe) & (df_banco['Concepto'] == concepto)).any():
           ajustes2.append((concepto, debe))


print(ajustes) # Faltan en el mayor (pero están en el banco)
print(ajustes2) # Faltan en el banco

falta_en_mayor = []
falta_en_banco = []

conceptos_mayor = []
conceptos_banco = []

for indice, fila in df_banco.iterrows():
    if fila["Concepto"] != "Saldo inicial":
      concepto = fila["Concepto"]
      debe = fila["Débitos"]
      haber = fila["Créditos"]

      if pd.isna(debe): # Hay un crédito
        # Haber
        # Concepto
        if not ((df_mayor['Débitos'] == haber) & (df_mayor['Concepto'] == concepto)).any():
          falta_en_mayor.append((concepto, haber, "C"))
          if concepto not in conceptos_mayor:
            conceptos_mayor.append(concepto)

      if pd.isna(haber): # Hay un débito
        # Debe
        # Concepto
        if not ((df_mayor['Créditos'] == debe) & (df_mayor['Concepto'] == concepto)).any():
          falta_en_mayor.append((concepto, debe, "D"))
          if concepto not in conceptos_mayor:
            conceptos_mayor.append(concepto)


for index, row in df_mayor.iterrows():
    if row["Concepto"] != "Saldo inicial":
      concepto = row["Concepto"]
      debe = row["Débitos"]
      haber = row["Créditos"]

      if pd.isna(debe): # Hay un crédito
        # Haber
        # Concepto
        if not ((df_banco['Débitos'] == haber) & (df_banco['Concepto'] == concepto)).any():
          falta_en_banco.append((concepto, haber, "C"))
          if concepto not in conceptos_banco:
            conceptos_banco.append(concepto)


      if pd.isna(haber): # Hay un débito
        # Debe
        # Concepto
        if not ((df_banco['Créditos'] == debe) & (df_banco['Concepto'] == concepto)).any():
          falta_en_banco.append((concepto, debe, "D"))
          if concepto not in conceptos_banco:
            conceptos_banco.append(concepto)

print(falta_en_mayor) # Faltan en el mayor (pero están en el banco)
print(falta_en_banco) # Faltan en el banco

print(conceptos_mayor)
print(conceptos_banco)

dif_monto = []

for concepto in conceptos_mayor:
  if concepto in conceptos_banco:
    dif_monto.append(concepto)

print(dif_monto)

### Concilio desde el mayor
correcion: float = 0
ajuste: float = 0
partidas_ajustadas = []

for i in range(len(falta_en_mayor)):
  #if falta_en_mayor[i][0] not in dif_monto:
    if falta_en_mayor[i][2] == "D":
      correcion = -falta_en_mayor[i][1]
    else:
      correcion = falta_en_mayor[i][1]

    partidas_ajustadas.append((falta_en_mayor[i][0], correcion))
    ajuste += correcion

for i in range(len(falta_en_banco)):
  #if falta_en_banco[i][0] not in dif_monto:
    if falta_en_banco[i][2] == "D":
      correcion = -falta_en_banco[i][1]
    else:
      correcion = falta_en_banco[i][1]

    partidas_ajustadas.append((falta_en_banco[i][0], correcion))
    ajuste += correcion

print(ajuste)
print(partidas_ajustadas)

print("CONCILIACIÓN PARTIENDO DEL SALDO CONTABLE")
print(f"Saldo inicial: ${saldo_mayor} \n")

# Crear la tabla y definir los encabezados
tabla = PrettyTable(["Concepto", "Monto a ajustar"])

# Agregar filas a la tabla
for fila in partidas_ajustadas:
    tabla.add_row(fila)
#tabla.add_row(["NUEVO SALDO", saldo_mayor + ajuste])

# Mostrar la tabla
print(tabla)
print(f"\nNUEVO SALDO: ${saldo_mayor+ajuste}")

if saldo_mayor+ajuste == saldo_banco:
  print("\n✅​ Conciliación exitosa")
else:
  print("\n❌​ Conciliación fallida")

### Concilio desde el banco
correcion: float = 0
ajuste: float = 0
partidas_ajustadas = []

for i in range(len(falta_en_mayor)):
  #if falta_en_mayor[i][0] not in dif_monto:
    if falta_en_mayor[i][2] == "C":
      correcion = -falta_en_mayor[i][1]
    else:
      correcion = falta_en_mayor[i][1]

    partidas_ajustadas.append((falta_en_mayor[i][0], correcion))
    ajuste += correcion

for i in range(len(falta_en_banco)):
  #if falta_en_banco[i][0] not in dif_monto:
    if falta_en_banco[i][2] == "C":
      correcion = -falta_en_banco[i][1]
    else:
      correcion = falta_en_banco[i][1]

    partidas_ajustadas.append((falta_en_banco[i][0], correcion))
    ajuste += correcion

print(ajuste)
print(partidas_ajustadas)

print("CONCILIACIÓN PARTIENDO DEL SALDO BANCARIO")
print(f"Saldo inicial: ${saldo_banco} \n")

# Crear la tabla y definir los encabezados
tabla = PrettyTable(["Concepto", "Monto a ajustar"])

# Agregar filas a la tabla
for fila in partidas_ajustadas:
    tabla.add_row(fila)
#tabla.add_row(["NUEVO SALDO", saldo_mayor + ajuste])

# Mostrar la tabla
print(tabla)
print(f"\nNUEVO SALDO: ${saldo_banco+ajuste}")

if saldo_banco+ajuste == saldo_mayor:
  print("\n✅​ Conciliación exitosa")
else:
  print("\n❌​ Conciliación fallida")